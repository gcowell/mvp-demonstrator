name: Primary Pipeline

on:  #Name of the GitHub event that triggers the workflow
  push:   #On Push Event We need to take action
    branches:  #Now we need to specify the branch name
    - master   

jobs:  #Workflow run is made up of one or more jobs
  get_updated_microservices:
    runs-on: ubuntu-latest  #Through which Server OS we need to Work (type of machine to run the job on)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Install Node.js Dependencies 
        run: |
          git fetch origin master
          npm install
      - name: Get Affected Services
        id: set-affected
        run: |
          nx_output=$(npx nx print-affected)
          echo $nx_output
          affected=$(jq -r '.projects' <<< "$nx_output")
          echo $affected
          echo "::set-output name=affected::$affected"
        # $(npx nx print-affected)"
    outputs:
      affected: ${{ steps.set-affected.outputs.affected }}


  deploy_microservices:
    needs: get_updated_microservices
    runs-on: ubuntu-latest  #Through which Server OS we need to Work (type of machine to run the job on)
    strategy:
      matrix:
        services: ${{ needs.get_updated_microservices.outputs.affected }}
    permissions:
      id-token: write
      contents: read
    steps:
    #Using versioned actions 
      - name: Check outputs
        run: echo ${{ needs.get_updated_microservices.outputs.affected }}
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Configure AWS Credentials  
        uses: aws-actions/configure-aws-credentials@v1 #--> Setup the Credential for the AWS cli
        with:
        # Created the Secrets Under the Repo only with These Variables
          role-to-assume: arn:aws:iam::202422821117:role/github
          role-session-name: github-pipeline-session
          aws-region: eu-west-2 #--> Define Region of the AWS-CLI 
      - name: deploy lambda
        run: |
          zip -j deploy.zip ./microservices/directory-data-manager/* 
          aws lambda update-function-code --function-name=directory-data-manager --zip-file=fileb://deploy.zip 
  

# At last the AWS CLI command to Update the Zip file with existing One (With Correct Function Name)